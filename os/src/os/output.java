/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package os;

                //import java.util.Scanner;
import javax.swing.table.DefaultTableModel;
import static os.entry.at;
import static os.entry.jTextField_process;

/**
 *
 * @author mariyam
 */
public class output extends javax.swing.JFrame {

    /**
     * Creates new form output
      * id The id
     */
    //DefaultTableModel mode1;

    public output(int p[],int at[],int bt[],int n,String option) {
        output.p=p;
        output.at=at;
        output.bt=bt;
        output.n=n;
        output.option=option;
        initComponents();
             // mode1 = (DefaultTableModel) jTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        average_tat = new javax.swing.JTextField();
        average_wt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process", "BT", "AT", "TAT", "WT"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Average TAT : ");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Average WT : ");

        average_tat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                average_tatActionPerformed(evt);
            }
        });

        average_wt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                average_wtActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButton1.setText("RUN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Waree", 1, 15)); // NOI18N
        jLabel3.setText("BT=Burst Time");

        jLabel4.setFont(new java.awt.Font("Waree", 1, 15)); // NOI18N
        jLabel4.setText("AT=Arrival Time");

        jLabel5.setFont(new java.awt.Font("Waree", 1, 15)); // NOI18N
        jLabel5.setText("TAT=Turn Around Time");

        jLabel6.setFont(new java.awt.Font("Waree", 1, 15)); // NOI18N
        jLabel6.setText("WT=Waiting Time");

        jLabel7.setFont(new java.awt.Font("Waree", 1, 15)); // NOI18N
        jLabel7.setText("CT=Completion Time");

        jButton2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButton2.setText("EXIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(average_tat, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(average_wt, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addComponent(jButton1)
                        .addGap(31, 31, 31)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(average_tat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(average_wt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void average_wtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_average_wtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_average_wtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       // jTextArea1.setText(option);
        switch(option)
        {
            case "FCFS":

class Process{
    int wait;
    int submission;
    int bursts;
	int turnAround;
	int completionTime = 0;
    Process(int sub,int bur){
        submission = sub;
        bursts = bur;
    }

}
//class Processmain{
    //public static void main(String[] args){
             int ttat=0,twt=0,x=0,l=1;
             float atat,awt;
		//Scanner s = new Scanner(System.in);
		//System.out.println("Enter the number of processes:");
		//int n = s.nextInt();
        Process[] p = new Process[n];
		for(int i=0;i<n;i++){
			//System.out.println("Enter Arrival time and bursts: ");
			int sub  = at[i];
			int bur = bt[i];
			p[i] = new Process(sub,bur);
		}
                //x=bt[0];
        for(int i=0;i<n;i++){
            x = x+bt[i];
			p[i].completionTime = x;
			p[i].turnAround = p[i].completionTime - at[i];
			p[i].wait = p[i].turnAround - bt[i];
            DefaultTableModel mode1;
                        mode1 = (DefaultTableModel) jTable1.getModel();
                        
                      // jTable1 table=new jTable1();
                     //  table.setModel(mode1);
	              
 mode1.insertRow(mode1.getRowCount(),new Object[]{l++,p[i].bursts,p[i].submission,p[i].turnAround,p[i].wait});
//jTable1.getModel().setValueAt(p[i].turnAround, i, 1);
   
        }
for(int i=0;i<n;i++)
{
    twt=twt+p[i].wait;

ttat=ttat+p[i].turnAround;
}
awt=twt/n;
atat=ttat/n;
String z = Float.toString(awt);
String f = Float.toString(atat);
average_tat.setText(f);
average_wt.setText(z);
                      
        
    


         break;
         
            case "SRT":
            {
                //import java.util.*;
//public static void main(String args[])
    
//Scanner sc=new Scanner(System.in);
int pno[]=new int[10];
//int bt[]=new int[10];
int wt[]=new int[10];
int tt[]=new int[10];
int tempwt[]=new int[10];
int tempno[]=new int[12];//stores process no temporary
int temp[]=new int[12];//represent Gantt chart
int i,j,ptr,t,t2;

float sjf_awt,sjf_atat,sjf_twt=0,sjf_ttat=0;
//System.out.println("Enter no of processes(less than 10):");
//n=sc.nextInt();
for(i=0;i<n;i++)
{
//System.out.println("Enter the burst time of process "+(i+1));
//bt[i]=sc.nextInt();
temp[i]=bt[i];
pno[i]=i+1;
tempno[i]=pno[i];
}
for(i=0;i<n;i++)
{
ptr=0;
while(ptr<=n-i)
{
if(temp[ptr]>temp[ptr+1])
{
t=temp[ptr];
temp[ptr]=temp[ptr+1];
temp[ptr+1]=t;
t2=tempno[ptr];
tempno[ptr]=tempno[ptr+1];
tempno[ptr+1]=t2;
}
ptr++;
}
}
for(i=0;i<n;i++)
{
temp[i]=temp[i+2];
tempno[i]=tempno[i+2];
}
tempwt[0]=0;
for(i=1;i<n;i++)
    tempwt[i]=tempwt[i-1]+temp[i-1];
for(i=0;i<n;i++)
{
j=0;
while(tempno[i]!=pno[j]&&j<n)
    j++;
wt[j]=tempwt[i];
}
for(i=0;i<n;i++)
    tt[i]=wt[i]+bt[i];
for(i=0;i<n;i++)
{
sjf_twt=sjf_twt+wt[i];
sjf_ttat=sjf_ttat+tt[i];
  DefaultTableModel mode1;
            mode1 = (DefaultTableModel) jTable1.getModel();
            mode1.insertRow(mode1.getRowCount(),new Object[]{i+1,bt[i],at[i],tt[i],wt[i]});
                        
                        }

sjf_awt=sjf_twt/n;
sjf_atat=sjf_ttat/n;
String d = Float.toString(sjf_awt);
String m = Float.toString(sjf_atat);
average_tat.setText(m);
average_wt.setText(d);
    
//System.out.println("Process\tBurst Time\tWaiting Time\tTurnaround Time");
/*for(i=0;i<n;i++)
{
System.out.print("P"+pno[i]+"\t"+bt[i]+"\t\t"+wt[i]+"\t\t"+tt[i]);
System.out.println();
}
System.out.println("Average Waiting Time="+awt);
System.out.println("Average Turnaround Time="+atat);
}

  */              

    }
                
                break;
            case "RR":
            {
                  
            
                        //this.size=size;
                //int j,i;        
                        
                       // ta=new int[n];
                        //rem=new int[n];
                int rr_twt=0,rr_ttat=0,rr_atat,rr_awt;
           
      int quan=4;
      //RR[] pr = new RR[n];
        // DataInputStream in=new DataInputStream(System.in);
int i,j,k,sum=0;
//System.out.println(“Enter number of process:”);
//int n=Integer.parseInt(in.readLine());
//int bt[]=new int[n];
int wt[]=new int[n];
int ta[]=new int[n];
int a[]=new int[n];


for(i=0;i<n;i++)
    wt[i]=0;
do
{
for(i=0;i<n;i++)
{
if(bt[i]>quan)
{
bt[i]-=quan;
for(j=0;j<n;j++)
{
if((j!=i)&&(bt[j]!=0))
wt[j]+=quan;
}
}
else
{
for(j=0;j<n;j++)
{
if((j!=i)&&(bt[j]!=0))
wt[j]+=bt[i];
}
bt[i]=0;
}
}
sum=0;
for(k=0;k<n;k++)
sum=sum+bt[k];
}
while(sum!=0);
                        for( i=0;i<n;i++)
                        {
                                    ta[i]=wt[i]+bt[i];
                        }
                       
                        for(  i=0;i<n;i++)
                        {
                         DefaultTableModel mode1;
                        mode1 = (DefaultTableModel) jTable1.getModel();
                        mode1.insertRow(mode1.getRowCount(),new Object[]{i+1,bt[i],at[i],ta[i],wt[i]});
//jTable1.getModel().setValueAt(p[i].turnAround, i, 1);
                        }
   
        
for(  i=0;i<n;i++)
{
    rr_twt=rr_twt+wt[i];
//p[i].turnAround=p[i].turnAround+p[i].wait;
rr_ttat=rr_ttat+ta[i];
}
rr_awt=rr_twt/n;
rr_atat=rr_ttat/n;
String d = Integer.toString(rr_awt);
String m = Integer.toString(rr_atat);
average_tat.setText(m);
average_wt.setText(d);
                        
             break;           
            
            }
    
        }
       
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void average_tatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_average_tatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_average_tatActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new output(p,at,bt,n,option).setVisible(true);
            }
        });
    }
   static int p[] =new int[20];
   static int at[]=new int[20];
   static int bt[]=new int[20];
   static int n;
   static String option;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField average_tat;
    private javax.swing.JTextField average_wt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
